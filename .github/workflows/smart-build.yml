#========================================================================================================================
# OpenWrt 智能编译工作流 - 合并版本
# 功能: 将参数准备和构建合并到同一个作业中，避免文件传递问题
#========================================================================================================================

name: 🎯 OpenWrt智能编译

on:
  repository_dispatch:
    types: [web_build]
  workflow_dispatch:
    inputs:
      source_branch:
        description: '源码分支'
        required: true
        default: 'lede-master'
        type: choice
        options:
          - 'lede-master'
          - 'openwrt-main'
          - 'immortalwrt-master'
          - 'Lienol-master'
      target_device:
        description: '目标设备'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'xiaomi_4a_gigabit'
          - 'newifi_d2'
          - 'rpi_4b'
          - 'nanopi_r2s'
      plugins:
        description: '插件列表（逗号分隔）'
        required: false
        default: ''
        type: string
      description:
        description: '编译描述'
        required: false
        default: '智能编译'
        type: string

env:
  # 编译环境常量
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

jobs:
  # 合并的构建任务 - 包含参数准备和编译
  build:
    runs-on: ubuntu-24.04
    name: 🔨 OpenWrt智能编译
    
    outputs:
      # 输出关键信息供后续使用
      build_tag: ${{ steps.prepare.outputs.build_tag }}
      device_name: ${{ steps.prepare.outputs.device_name }}
      firmware_path: ${{ steps.build.outputs.firmware_path }}
      
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 准备构建参数
        id: prepare
        run: |
          # 设置时区
          sudo timedatectl set-timezone "$TZ"
          
          # 调用构建协调器进行参数准备和验证
          chmod +x script/build-coordinator.sh
          
          # 构建输入参数（支持两种触发方式）
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Web界面触发
            SOURCE_BRANCH="${{ github.event.client_payload.source_branch }}"
            TARGET_DEVICE="${{ github.event.client_payload.target_device }}"
            PLUGINS="${{ github.event.client_payload.plugins }}"
            DESCRIPTION="${{ github.event.client_payload.description }}"
          else
            # 手动触发
            SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
            TARGET_DEVICE="${{ github.event.inputs.target_device }}"
            PLUGINS="${{ github.event.inputs.plugins }}"
            DESCRIPTION="${{ github.event.inputs.description }}"
          fi
          
          # 调用构建协调器进行参数处理
          CONFIG_FILE=$(./script/build-coordinator.sh prepare \
            --source "$SOURCE_BRANCH" \
            --device "$TARGET_DEVICE" \
            --plugins "$PLUGINS" \
            --description "$DESCRIPTION" \
            --output-env)
          
          # 保存配置文件路径到环境变量
          echo "BUILD_CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          
          # 读取并输出关键信息
          echo "build_tag=$(jq -r '.build_info.build_tag' $CONFIG_FILE)" >> $GITHUB_OUTPUT
          echo "device_name=$(jq -r '.build_params.target_device' $CONFIG_FILE)" >> $GITHUB_OUTPUT
          echo "source_branch=$(jq -r '.build_params.source_branch' $CONFIG_FILE)" >> $GITHUB_OUTPUT

      - name: 🚀 执行智能编译
        id: build
        run: |
          # 直接调用构建协调器执行编译，使用环境变量中的配置文件
          ./script/build-coordinator.sh build \
            --config-file "$BUILD_CONFIG_FILE" \
            --auto-fix \
            --verbose
          
          # 输出固件路径（如果构建成功）
          if [ -d "openwrt/bin/targets" ]; then
            FIRMWARE_PATH=$(find openwrt/bin/targets -name "*.img" -o -name "*.bin" | head -1)
            echo "firmware_path=$FIRMWARE_PATH" >> $GITHUB_OUTPUT
          fi

      - name: 📦 整理编译产物
        id: organize
        if: steps.build.conclusion == 'success'
        run: |
          # 调用构建协调器进行产物整理
          ./script/build-coordinator.sh organize \
            --config-file "$BUILD_CONFIG_FILE"

      - name: 📤 上传固件
        if: steps.build.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-Firmware-${{ steps.prepare.outputs.build_tag }}
          path: |
            openwrt/bin/targets/*/*/*.img
            openwrt/bin/targets/*/*/*.bin
            openwrt/bin/targets/*/*/*.vmdk
            openwrt/bin/targets/*/*/sha256sums
          retention-days: 7

      - name: 📋 生成构建报告
        if: always()
        run: |
          # 调用构建协调器生成通知
          ./script/build-coordinator.sh notify \
            --config-file "$BUILD_CONFIG_FILE" \
            --status "${{ steps.build.conclusion }}"

  # 可选：发布到Release（仅在成功时）
  release:
    runs-on: ubuntu-24.04
    needs: build
    if: needs.build.result == 'success'
    name: 📦 发布固件
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        
      - name: 📥 下载固件
        uses: actions/download-artifact@v4
        with:
          name: OpenWrt-Firmware-${{ needs.build.outputs.build_tag }}
          path: firmware/
          
      - name: 🏷️ 创建Release
        uses: ncipollo/release-action@v1
        with:
          name: OpenWrt-${{ needs.build.outputs.build_tag }}
          tag: ${{ needs.build.outputs.build_tag }}
          body: |
            ## 📦 OpenWrt固件发布
            
            **设备型号**: ${{ needs.build.outputs.device_name }}
            **编译时间**: ${{ github.run_started_at }}
            **源码分支**: ${{ github.event.inputs.source_branch || github.event.client_payload.source_branch }}
            
            ### 📥 下载说明
            - 选择对应设备的固件文件
            - 查看sha256sums验证文件完整性
            - 按照设备刷机教程进行安装
            
            ### 🔗 相关链接
            - [编译日志](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [源码仓库](https://github.com/${{ github.repository }})

          draft: false
          prerelease: false